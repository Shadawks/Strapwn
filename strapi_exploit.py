import requests
from json import JSONDecodeError
from logger import logger
from rich.prompt import Prompt

class StrapiExploitInterface:
    ''''Interface for Strapi Exploit'''
    def __init__(self, name: str, description: str):
        self.name = name
        self.description = description
        self.logger = logger
    def run(self) -> bool:
        '''Run the plugin. Returns True if successful, False if not.'''
        pass
    def get_name(self) -> str:
        '''Get the name of the plugin.'''
        return self.name
    def get_description(self) -> str:
        '''Get the description of the plugin.'''
        return self.description
    def is_valid(self) -> bool:
        '''Check if the plugin is valid.'''
        if self.name != "" and self.description != "":
            return True
        else:
            return False
    def get_strapi_version(self, url: str) -> str:
        '''Get the version of Strapi.'''
        try:
            version = requests.get(f"{url}/admin/init", timeout=10).json()["data"]["strapiVersion"]
            return version
        except JSONDecodeError:
            try:
                version = requests.get(f"{url}/admin/strapiVersion", timeout=10).json()["strapiVersion"]
                return version
            except JSONDecodeError:
                return ""
    def input(self, prompt: str) -> str:
        '''Get input from the user.'''
        return Prompt.ask(f"[bold cyan][>] {prompt} [/bold cyan]")
    def display(self, text: str) -> None:
        '''Display text to the user.'''
        self.logger.display(f"[{self.name}] {text}")
    def success(self, text: str) -> None:
        '''Display success message to the user.'''
        self.logger.success(f"[{self.name}] {text}")
    def error(self, text: str) -> None:
        '''Display error message to the user.'''
        self.logger.error(f"[{self.name}] {text}")
    def warning(self, text: str) -> None:
        '''Display warning message to the user.'''
        self.logger.warning(f"[{self.name}] {text}")
    def info(self, text: str) -> None:
        '''Display info message to the user.'''
        self.logger.info(f"[{self.name}] {text}")